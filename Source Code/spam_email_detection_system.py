# -*- coding: utf-8 -*-
"""Spam_Email_Detection_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YSoYCtVyDuhh50e4jj_AT6Q4mokpe5Bz
"""

import numpy as np
import pandas as pd
import sklearn
import nltk
import string

dataset= pd.read_csv('enter your file location and the file have to a .csv file')

dataset.head(5)

dataset.shape

dataset.drop_duplicates(inplace= True)

dataset.isnull().sum()

dataset.shape

from sklearn import preprocessing
cot_cat=['label']
label_encoder= preprocessing.LabelEncoder()
for i in cot_cat:
  dataset[i]= label_encoder.fit_transform(dataset[i])

dataset.head()

from nltk.corpus import stopwords
nltk.download('stopwords')

def processing(message):
  no_punc= [char for char in message if char not in string.punctuation]
  no_punc= ''.join(no_punc)

  clean_words= [word for word in no_punc.split() if word.lower() not in stopwords.words('english')]
  return clean_words

dataset['message'].head().apply(processing)

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer(analyzer=processing)

message_bag= vectorizer.fit_transform(dataset['message'])

message_bag.shape

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(message_bag,dataset['label'], test_size= 0.20, random_state=0)

from sklearn.naive_bayes import MultinomialNB
classifier= MultinomialNB().fit(x_train, y_train)

print(classifier.predict(x_train))

y_train.values

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
pred= classifier.predict(x_train)
print(classification_report(y_train, pred))
print('confusion matrix: \n',confusion_matrix(y_train, pred))
print('accuracy: ', accuracy_score(y_train, pred))

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
pred= classifier.predict(x_test)
print(classification_report(y_test, pred))
print('confusion matrix: \n',confusion_matrix(y_test, pred))
print('accuracy: ', accuracy_score(y_test, pred))

pip install --upgrade gradio

import gradio as gr

def predict_on_single_text(email):
    processed_mail = processing(email)
    email_vectorized = vectorizer.transform([' '.join(processed_mail)])
    prediction = classifier.predict(email_vectorized)

    if prediction == 1:
        return "This email is SPAM."
    else:
        return "This email is NOT SPAM."

interface = gr.Interface(fn=predict_on_single_text,
                         inputs=gr.Textbox(label="Enter the email message to check if it's spam or not:"),
                         outputs="text",
                         title="Spam Email Prediction",
                         description="Enter an email message to check if it is spam or not.")

interface.launch()

email = input("Enter the email message to check if it's spam or not: ")
predict_on_single_text(email)